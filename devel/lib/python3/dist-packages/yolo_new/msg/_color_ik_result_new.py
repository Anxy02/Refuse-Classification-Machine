# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yolo_new/color_ik_result_new.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class color_ik_result_new(genpy.Message):
  _md5sum = "72875b09b8c68c6e926739b0b0152e3a"
  _type = "yolo_new/color_ik_result_new"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 pedestal_angle
float32 arm_angle
float32 hand_angle
string  sort
int32   count

"""
  __slots__ = ['pedestal_angle','arm_angle','hand_angle','sort','count']
  _slot_types = ['float32','float32','float32','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pedestal_angle,arm_angle,hand_angle,sort,count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(color_ik_result_new, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pedestal_angle is None:
        self.pedestal_angle = 0.
      if self.arm_angle is None:
        self.arm_angle = 0.
      if self.hand_angle is None:
        self.hand_angle = 0.
      if self.sort is None:
        self.sort = ''
      if self.count is None:
        self.count = 0
    else:
      self.pedestal_angle = 0.
      self.arm_angle = 0.
      self.hand_angle = 0.
      self.sort = ''
      self.count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.pedestal_angle, _x.arm_angle, _x.hand_angle))
      _x = self.sort
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.count
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pedestal_angle, _x.arm_angle, _x.hand_angle,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sort = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sort = str[start:end]
      start = end
      end += 4
      (self.count,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.pedestal_angle, _x.arm_angle, _x.hand_angle))
      _x = self.sort
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.count
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pedestal_angle, _x.arm_angle, _x.hand_angle,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sort = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sort = str[start:end]
      start = end
      end += 4
      (self.count,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
