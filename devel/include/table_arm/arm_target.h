// Generated by gencpp from file table_arm/arm_target.msg
// DO NOT EDIT!


#ifndef TABLE_ARM_MESSAGE_ARM_TARGET_H
#define TABLE_ARM_MESSAGE_ARM_TARGET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace table_arm
{
template <class ContainerAllocator>
struct arm_target_
{
  typedef arm_target_<ContainerAllocator> Type;

  arm_target_()
    : joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)
    , joint5(0.0)
    , joint6(0.0)
    , action()
    , color()  {
    }
  arm_target_(const ContainerAllocator& _alloc)
    : joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)
    , joint5(0.0)
    , joint6(0.0)
    , action(_alloc)
    , color(_alloc)  {
  (void)_alloc;
    }



   typedef float _joint1_type;
  _joint1_type joint1;

   typedef float _joint2_type;
  _joint2_type joint2;

   typedef float _joint3_type;
  _joint3_type joint3;

   typedef float _joint4_type;
  _joint4_type joint4;

   typedef float _joint5_type;
  _joint5_type joint5;

   typedef float _joint6_type;
  _joint6_type joint6;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::table_arm::arm_target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::table_arm::arm_target_<ContainerAllocator> const> ConstPtr;

}; // struct arm_target_

typedef ::table_arm::arm_target_<std::allocator<void> > arm_target;

typedef boost::shared_ptr< ::table_arm::arm_target > arm_targetPtr;
typedef boost::shared_ptr< ::table_arm::arm_target const> arm_targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::table_arm::arm_target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::table_arm::arm_target_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::table_arm::arm_target_<ContainerAllocator1> & lhs, const ::table_arm::arm_target_<ContainerAllocator2> & rhs)
{
  return lhs.joint1 == rhs.joint1 &&
    lhs.joint2 == rhs.joint2 &&
    lhs.joint3 == rhs.joint3 &&
    lhs.joint4 == rhs.joint4 &&
    lhs.joint5 == rhs.joint5 &&
    lhs.joint6 == rhs.joint6 &&
    lhs.action == rhs.action &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::table_arm::arm_target_<ContainerAllocator1> & lhs, const ::table_arm::arm_target_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace table_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::table_arm::arm_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::table_arm::arm_target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_arm::arm_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_arm::arm_target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_arm::arm_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_arm::arm_target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::table_arm::arm_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2117965adf8d3eacb8093d05d530c79";
  }

  static const char* value(const ::table_arm::arm_target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2117965adf8d3eaULL;
  static const uint64_t static_value2 = 0xcb8093d05d530c79ULL;
};

template<class ContainerAllocator>
struct DataType< ::table_arm::arm_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "table_arm/arm_target";
  }

  static const char* value(const ::table_arm::arm_target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::table_arm::arm_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 joint1\n"
"float32 joint2\n"
"float32 joint3\n"
"float32 joint4\n"
"float32 joint5\n"
"float32 joint6\n"
"string  action\n"
"string  color\n"
"\n"
;
  }

  static const char* value(const ::table_arm::arm_target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::table_arm::arm_target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint1);
      stream.next(m.joint2);
      stream.next(m.joint3);
      stream.next(m.joint4);
      stream.next(m.joint5);
      stream.next(m.joint6);
      stream.next(m.action);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::table_arm::arm_target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::table_arm::arm_target_<ContainerAllocator>& v)
  {
    s << indent << "joint1: ";
    Printer<float>::stream(s, indent + "  ", v.joint1);
    s << indent << "joint2: ";
    Printer<float>::stream(s, indent + "  ", v.joint2);
    s << indent << "joint3: ";
    Printer<float>::stream(s, indent + "  ", v.joint3);
    s << indent << "joint4: ";
    Printer<float>::stream(s, indent + "  ", v.joint4);
    s << indent << "joint5: ";
    Printer<float>::stream(s, indent + "  ", v.joint5);
    s << indent << "joint6: ";
    Printer<float>::stream(s, indent + "  ", v.joint6);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TABLE_ARM_MESSAGE_ARM_TARGET_H
