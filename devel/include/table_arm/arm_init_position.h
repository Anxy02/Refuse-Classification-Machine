// Generated by gencpp from file table_arm/arm_init_position.msg
// DO NOT EDIT!


#ifndef TABLE_ARM_MESSAGE_ARM_INIT_POSITION_H
#define TABLE_ARM_MESSAGE_ARM_INIT_POSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace table_arm
{
template <class ContainerAllocator>
struct arm_init_position_
{
  typedef arm_init_position_<ContainerAllocator> Type;

  arm_init_position_()
    : init_joint1(0)
    , init_joint2(0)
    , init_joint3(0)
    , init_joint4(0)
    , init_joint5(0)
    , init_joint6(0)
    , save_init_pose(0)
    , arm_look(0)
    , arm_home(0)  {
    }
  arm_init_position_(const ContainerAllocator& _alloc)
    : init_joint1(0)
    , init_joint2(0)
    , init_joint3(0)
    , init_joint4(0)
    , init_joint5(0)
    , init_joint6(0)
    , save_init_pose(0)
    , arm_look(0)
    , arm_home(0)  {
  (void)_alloc;
    }



   typedef int8_t _init_joint1_type;
  _init_joint1_type init_joint1;

   typedef int8_t _init_joint2_type;
  _init_joint2_type init_joint2;

   typedef int8_t _init_joint3_type;
  _init_joint3_type init_joint3;

   typedef int8_t _init_joint4_type;
  _init_joint4_type init_joint4;

   typedef int8_t _init_joint5_type;
  _init_joint5_type init_joint5;

   typedef int8_t _init_joint6_type;
  _init_joint6_type init_joint6;

   typedef int8_t _save_init_pose_type;
  _save_init_pose_type save_init_pose;

   typedef int8_t _arm_look_type;
  _arm_look_type arm_look;

   typedef int8_t _arm_home_type;
  _arm_home_type arm_home;





  typedef boost::shared_ptr< ::table_arm::arm_init_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::table_arm::arm_init_position_<ContainerAllocator> const> ConstPtr;

}; // struct arm_init_position_

typedef ::table_arm::arm_init_position_<std::allocator<void> > arm_init_position;

typedef boost::shared_ptr< ::table_arm::arm_init_position > arm_init_positionPtr;
typedef boost::shared_ptr< ::table_arm::arm_init_position const> arm_init_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::table_arm::arm_init_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::table_arm::arm_init_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::table_arm::arm_init_position_<ContainerAllocator1> & lhs, const ::table_arm::arm_init_position_<ContainerAllocator2> & rhs)
{
  return lhs.init_joint1 == rhs.init_joint1 &&
    lhs.init_joint2 == rhs.init_joint2 &&
    lhs.init_joint3 == rhs.init_joint3 &&
    lhs.init_joint4 == rhs.init_joint4 &&
    lhs.init_joint5 == rhs.init_joint5 &&
    lhs.init_joint6 == rhs.init_joint6 &&
    lhs.save_init_pose == rhs.save_init_pose &&
    lhs.arm_look == rhs.arm_look &&
    lhs.arm_home == rhs.arm_home;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::table_arm::arm_init_position_<ContainerAllocator1> & lhs, const ::table_arm::arm_init_position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace table_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::table_arm::arm_init_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::table_arm::arm_init_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_arm::arm_init_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_arm::arm_init_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_arm::arm_init_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_arm::arm_init_position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::table_arm::arm_init_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "214a3a640e2cbc2daa6f74f00b9c277b";
  }

  static const char* value(const ::table_arm::arm_init_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x214a3a640e2cbc2dULL;
  static const uint64_t static_value2 = 0xaa6f74f00b9c277bULL;
};

template<class ContainerAllocator>
struct DataType< ::table_arm::arm_init_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "table_arm/arm_init_position";
  }

  static const char* value(const ::table_arm::arm_init_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::table_arm::arm_init_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 init_joint1\n"
"int8 init_joint2\n"
"int8 init_joint3\n"
"int8 init_joint4\n"
"int8 init_joint5\n"
"int8 init_joint6\n"
"int8 save_init_pose\n"
"int8 arm_look\n"
"int8 arm_home\n"
"\n"
"\n"
;
  }

  static const char* value(const ::table_arm::arm_init_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::table_arm::arm_init_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.init_joint1);
      stream.next(m.init_joint2);
      stream.next(m.init_joint3);
      stream.next(m.init_joint4);
      stream.next(m.init_joint5);
      stream.next(m.init_joint6);
      stream.next(m.save_init_pose);
      stream.next(m.arm_look);
      stream.next(m.arm_home);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_init_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::table_arm::arm_init_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::table_arm::arm_init_position_<ContainerAllocator>& v)
  {
    s << indent << "init_joint1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.init_joint1);
    s << indent << "init_joint2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.init_joint2);
    s << indent << "init_joint3: ";
    Printer<int8_t>::stream(s, indent + "  ", v.init_joint3);
    s << indent << "init_joint4: ";
    Printer<int8_t>::stream(s, indent + "  ", v.init_joint4);
    s << indent << "init_joint5: ";
    Printer<int8_t>::stream(s, indent + "  ", v.init_joint5);
    s << indent << "init_joint6: ";
    Printer<int8_t>::stream(s, indent + "  ", v.init_joint6);
    s << indent << "save_init_pose: ";
    Printer<int8_t>::stream(s, indent + "  ", v.save_init_pose);
    s << indent << "arm_look: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arm_look);
    s << indent << "arm_home: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arm_home);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TABLE_ARM_MESSAGE_ARM_INIT_POSITION_H
