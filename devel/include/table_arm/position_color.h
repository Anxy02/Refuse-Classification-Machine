// Generated by gencpp from file table_arm/position_color.msg
// DO NOT EDIT!


#ifndef TABLE_ARM_MESSAGE_POSITION_COLOR_H
#define TABLE_ARM_MESSAGE_POSITION_COLOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace table_arm
{
template <class ContainerAllocator>
struct position_color_
{
  typedef position_color_<ContainerAllocator> Type;

  position_color_()
    : angleX(0.0)
    , angleY(0.0)
    , rotation(0.0)
    , count(0)
    , color()  {
    }
  position_color_(const ContainerAllocator& _alloc)
    : angleX(0.0)
    , angleY(0.0)
    , rotation(0.0)
    , count(0)
    , color(_alloc)  {
  (void)_alloc;
    }



   typedef float _angleX_type;
  _angleX_type angleX;

   typedef float _angleY_type;
  _angleY_type angleY;

   typedef float _rotation_type;
  _rotation_type rotation;

   typedef int32_t _count_type;
  _count_type count;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::table_arm::position_color_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::table_arm::position_color_<ContainerAllocator> const> ConstPtr;

}; // struct position_color_

typedef ::table_arm::position_color_<std::allocator<void> > position_color;

typedef boost::shared_ptr< ::table_arm::position_color > position_colorPtr;
typedef boost::shared_ptr< ::table_arm::position_color const> position_colorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::table_arm::position_color_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::table_arm::position_color_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::table_arm::position_color_<ContainerAllocator1> & lhs, const ::table_arm::position_color_<ContainerAllocator2> & rhs)
{
  return lhs.angleX == rhs.angleX &&
    lhs.angleY == rhs.angleY &&
    lhs.rotation == rhs.rotation &&
    lhs.count == rhs.count &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::table_arm::position_color_<ContainerAllocator1> & lhs, const ::table_arm::position_color_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace table_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::table_arm::position_color_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::table_arm::position_color_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_arm::position_color_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_arm::position_color_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_arm::position_color_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_arm::position_color_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::table_arm::position_color_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fddc2a4e1da7ee01660a69ccfefa88b";
  }

  static const char* value(const ::table_arm::position_color_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fddc2a4e1da7ee0ULL;
  static const uint64_t static_value2 = 0x1660a69ccfefa88bULL;
};

template<class ContainerAllocator>
struct DataType< ::table_arm::position_color_<ContainerAllocator> >
{
  static const char* value()
  {
    return "table_arm/position_color";
  }

  static const char* value(const ::table_arm::position_color_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::table_arm::position_color_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angleX\n"
"float32 angleY\n"
"float32 rotation\n"
"int32   count\n"
"string  color\n"
"\n"
"\n"
;
  }

  static const char* value(const ::table_arm::position_color_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::table_arm::position_color_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angleX);
      stream.next(m.angleY);
      stream.next(m.rotation);
      stream.next(m.count);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_color_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::table_arm::position_color_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::table_arm::position_color_<ContainerAllocator>& v)
  {
    s << indent << "angleX: ";
    Printer<float>::stream(s, indent + "  ", v.angleX);
    s << indent << "angleY: ";
    Printer<float>::stream(s, indent + "  ", v.angleY);
    s << indent << "rotation: ";
    Printer<float>::stream(s, indent + "  ", v.rotation);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TABLE_ARM_MESSAGE_POSITION_COLOR_H
