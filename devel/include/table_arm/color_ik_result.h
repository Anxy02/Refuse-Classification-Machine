// Generated by gencpp from file table_arm/color_ik_result.msg
// DO NOT EDIT!


#ifndef TABLE_ARM_MESSAGE_COLOR_IK_RESULT_H
#define TABLE_ARM_MESSAGE_COLOR_IK_RESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace table_arm
{
template <class ContainerAllocator>
struct color_ik_result_
{
  typedef color_ik_result_<ContainerAllocator> Type;

  color_ik_result_()
    : pedestal_angle(0.0)
    , arm_angle(0.0)
    , hand_angle(0.0)
    , color()  {
    }
  color_ik_result_(const ContainerAllocator& _alloc)
    : pedestal_angle(0.0)
    , arm_angle(0.0)
    , hand_angle(0.0)
    , color(_alloc)  {
  (void)_alloc;
    }



   typedef float _pedestal_angle_type;
  _pedestal_angle_type pedestal_angle;

   typedef float _arm_angle_type;
  _arm_angle_type arm_angle;

   typedef float _hand_angle_type;
  _hand_angle_type hand_angle;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::table_arm::color_ik_result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::table_arm::color_ik_result_<ContainerAllocator> const> ConstPtr;

}; // struct color_ik_result_

typedef ::table_arm::color_ik_result_<std::allocator<void> > color_ik_result;

typedef boost::shared_ptr< ::table_arm::color_ik_result > color_ik_resultPtr;
typedef boost::shared_ptr< ::table_arm::color_ik_result const> color_ik_resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::table_arm::color_ik_result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::table_arm::color_ik_result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::table_arm::color_ik_result_<ContainerAllocator1> & lhs, const ::table_arm::color_ik_result_<ContainerAllocator2> & rhs)
{
  return lhs.pedestal_angle == rhs.pedestal_angle &&
    lhs.arm_angle == rhs.arm_angle &&
    lhs.hand_angle == rhs.hand_angle &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::table_arm::color_ik_result_<ContainerAllocator1> & lhs, const ::table_arm::color_ik_result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace table_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::table_arm::color_ik_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::table_arm::color_ik_result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_arm::color_ik_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_arm::color_ik_result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_arm::color_ik_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_arm::color_ik_result_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::table_arm::color_ik_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26d2c0ae8f268cfc5f83e3b64098d2c7";
  }

  static const char* value(const ::table_arm::color_ik_result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26d2c0ae8f268cfcULL;
  static const uint64_t static_value2 = 0x5f83e3b64098d2c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::table_arm::color_ik_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "table_arm/color_ik_result";
  }

  static const char* value(const ::table_arm::color_ik_result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::table_arm::color_ik_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pedestal_angle\n"
"float32 arm_angle\n"
"float32 hand_angle\n"
"string  color\n"
"\n"
;
  }

  static const char* value(const ::table_arm::color_ik_result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::table_arm::color_ik_result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pedestal_angle);
      stream.next(m.arm_angle);
      stream.next(m.hand_angle);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct color_ik_result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::table_arm::color_ik_result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::table_arm::color_ik_result_<ContainerAllocator>& v)
  {
    s << indent << "pedestal_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pedestal_angle);
    s << indent << "arm_angle: ";
    Printer<float>::stream(s, indent + "  ", v.arm_angle);
    s << indent << "hand_angle: ";
    Printer<float>::stream(s, indent + "  ", v.hand_angle);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TABLE_ARM_MESSAGE_COLOR_IK_RESULT_H
