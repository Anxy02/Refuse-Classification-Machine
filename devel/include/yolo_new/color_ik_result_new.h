// Generated by gencpp from file yolo_new/color_ik_result_new.msg
// DO NOT EDIT!


#ifndef YOLO_NEW_MESSAGE_COLOR_IK_RESULT_NEW_H
#define YOLO_NEW_MESSAGE_COLOR_IK_RESULT_NEW_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolo_new
{
template <class ContainerAllocator>
struct color_ik_result_new_
{
  typedef color_ik_result_new_<ContainerAllocator> Type;

  color_ik_result_new_()
    : pedestal_angle(0.0)
    , arm_angle(0.0)
    , hand_angle(0.0)
    , sort()
    , count(0)  {
    }
  color_ik_result_new_(const ContainerAllocator& _alloc)
    : pedestal_angle(0.0)
    , arm_angle(0.0)
    , hand_angle(0.0)
    , sort(_alloc)
    , count(0)  {
  (void)_alloc;
    }



   typedef float _pedestal_angle_type;
  _pedestal_angle_type pedestal_angle;

   typedef float _arm_angle_type;
  _arm_angle_type arm_angle;

   typedef float _hand_angle_type;
  _hand_angle_type hand_angle;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sort_type;
  _sort_type sort;

   typedef int32_t _count_type;
  _count_type count;





  typedef boost::shared_ptr< ::yolo_new::color_ik_result_new_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolo_new::color_ik_result_new_<ContainerAllocator> const> ConstPtr;

}; // struct color_ik_result_new_

typedef ::yolo_new::color_ik_result_new_<std::allocator<void> > color_ik_result_new;

typedef boost::shared_ptr< ::yolo_new::color_ik_result_new > color_ik_result_newPtr;
typedef boost::shared_ptr< ::yolo_new::color_ik_result_new const> color_ik_result_newConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolo_new::color_ik_result_new_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolo_new::color_ik_result_new_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolo_new::color_ik_result_new_<ContainerAllocator1> & lhs, const ::yolo_new::color_ik_result_new_<ContainerAllocator2> & rhs)
{
  return lhs.pedestal_angle == rhs.pedestal_angle &&
    lhs.arm_angle == rhs.arm_angle &&
    lhs.hand_angle == rhs.hand_angle &&
    lhs.sort == rhs.sort &&
    lhs.count == rhs.count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolo_new::color_ik_result_new_<ContainerAllocator1> & lhs, const ::yolo_new::color_ik_result_new_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolo_new

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolo_new::color_ik_result_new_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_new::color_ik_result_new_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo_new::color_ik_result_new_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo_new::color_ik_result_new_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_new::color_ik_result_new_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_new::color_ik_result_new_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolo_new::color_ik_result_new_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72875b09b8c68c6e926739b0b0152e3a";
  }

  static const char* value(const ::yolo_new::color_ik_result_new_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72875b09b8c68c6eULL;
  static const uint64_t static_value2 = 0x926739b0b0152e3aULL;
};

template<class ContainerAllocator>
struct DataType< ::yolo_new::color_ik_result_new_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolo_new/color_ik_result_new";
  }

  static const char* value(const ::yolo_new::color_ik_result_new_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolo_new::color_ik_result_new_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pedestal_angle\n"
"float32 arm_angle\n"
"float32 hand_angle\n"
"string  sort\n"
"int32   count\n"
"\n"
;
  }

  static const char* value(const ::yolo_new::color_ik_result_new_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolo_new::color_ik_result_new_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pedestal_angle);
      stream.next(m.arm_angle);
      stream.next(m.hand_angle);
      stream.next(m.sort);
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct color_ik_result_new_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolo_new::color_ik_result_new_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolo_new::color_ik_result_new_<ContainerAllocator>& v)
  {
    s << indent << "pedestal_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pedestal_angle);
    s << indent << "arm_angle: ";
    Printer<float>::stream(s, indent + "  ", v.arm_angle);
    s << indent << "hand_angle: ";
    Printer<float>::stream(s, indent + "  ", v.hand_angle);
    s << indent << "sort: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sort);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLO_NEW_MESSAGE_COLOR_IK_RESULT_NEW_H
