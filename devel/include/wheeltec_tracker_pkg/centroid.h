// Generated by gencpp from file wheeltec_tracker_pkg/centroid.msg
// DO NOT EDIT!


#ifndef WHEELTEC_TRACKER_PKG_MESSAGE_CENTROID_H
#define WHEELTEC_TRACKER_PKG_MESSAGE_CENTROID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wheeltec_tracker_pkg
{
template <class ContainerAllocator>
struct centroid_
{
  typedef centroid_<ContainerAllocator> Type;

  centroid_()
    : x(0)
    , y(0)
    , leftupper_x(0)
    , leftupper_y(0)
    , rightlower_w(0)
    , rightlower_h(0)  {
    }
  centroid_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , leftupper_x(0)
    , leftupper_y(0)
    , rightlower_w(0)
    , rightlower_h(0)  {
  (void)_alloc;
    }



   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _leftupper_x_type;
  _leftupper_x_type leftupper_x;

   typedef int32_t _leftupper_y_type;
  _leftupper_y_type leftupper_y;

   typedef int32_t _rightlower_w_type;
  _rightlower_w_type rightlower_w;

   typedef int32_t _rightlower_h_type;
  _rightlower_h_type rightlower_h;





  typedef boost::shared_ptr< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> const> ConstPtr;

}; // struct centroid_

typedef ::wheeltec_tracker_pkg::centroid_<std::allocator<void> > centroid;

typedef boost::shared_ptr< ::wheeltec_tracker_pkg::centroid > centroidPtr;
typedef boost::shared_ptr< ::wheeltec_tracker_pkg::centroid const> centroidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator1> & lhs, const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.leftupper_x == rhs.leftupper_x &&
    lhs.leftupper_y == rhs.leftupper_y &&
    lhs.rightlower_w == rhs.rightlower_w &&
    lhs.rightlower_h == rhs.rightlower_h;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator1> & lhs, const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wheeltec_tracker_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0648a54cb14a169de06ff0677b4c869";
  }

  static const char* value(const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0648a54cb14a169ULL;
  static const uint64_t static_value2 = 0xde06ff0677b4c869ULL;
};

template<class ContainerAllocator>
struct DataType< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wheeltec_tracker_pkg/centroid";
  }

  static const char* value(const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 x\n"
"int32 y\n"
"int32 leftupper_x\n"
"int32 leftupper_y\n"
"int32 rightlower_w\n"
"int32 rightlower_h\n"
;
  }

  static const char* value(const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.leftupper_x);
      stream.next(m.leftupper_y);
      stream.next(m.rightlower_w);
      stream.next(m.rightlower_h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct centroid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wheeltec_tracker_pkg::centroid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wheeltec_tracker_pkg::centroid_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "leftupper_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.leftupper_x);
    s << indent << "leftupper_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.leftupper_y);
    s << indent << "rightlower_w: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rightlower_w);
    s << indent << "rightlower_h: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rightlower_h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHEELTEC_TRACKER_PKG_MESSAGE_CENTROID_H
